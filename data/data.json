[   
    {
        "id": 7,
        "title": "InStock",
        "stack": ["React", "TypeScript", "Sass", "Node.js", "Express.js"],
        "also": ["BEM naming convention"],
        "poster": "InStock.png",
        "video": "InStock Preview.mp4",
        "live": "https://ck-instock.netlify.app/",
        "GitHub": "Private",
        "description": "An inventory management system completed in a team of five group members. Has two main pages: one to display a list of all inventory, and the other for a list of all warehouses. Has full CRUD functionality; can POST, GET, PUT and DELETE warehouses and individual inventory items. The React front-end is provided data from the Node/Express back-end connected to MySQL database. Adhered to Scrum/Agile methodologies for project management. Tasks organized through Jira, with other Scrum practices implemented to manage team members, such as stand-up meetings with TAs/instructors acting as project manager, and organized group meetings to collaborate on work. Completed in a one week sprint.",
        "requirements": "Each team member must take on an equal share of front-end/back-end tasks. Be fully present and available for stand-ups, meetings, and group work. Be available to communicate during working hours. Commit to tasks (tickets) using Jira board and complete tasks, seeking assistance/collaboration as needed. Tickets must be moved through every column to indicate stage of completion. All functionality specified in Jira tickets must be implemented without bugs. Implement Gitflow (using Git and GitHub) to manage sending and receiving updated project code. Leave detailed, frequent Git commit messages on all tasks. Resolve merge conflicts in one's own pull requests. Make pull requests of work completed with descriptions of work completed. Review team-members' pull requests. Leave comments on reviewed pull requests. Never merge pull requests without team approval. Project must match Figma mobile, tablet, desktop and component mockups at and between all breakpoints. Front-end must use React, react-router-dom, Node, Express, BEM, Sass, npm, Postman, and browser development tools. May utilize third-party libraries for dropdown and modal components. Must follow specified folder structure, naming conventions, and best practices."
    },
    {
        "id": 6,
        "title": "InStock Server",
        "stack": ["Node.js", "Express.js", "Knex.js", "MySQL"],
        "also": [],
        "poster": "InStock Server.png",
        "video": "InStock Server Preview.mp4",
        "live": "https://ck-instock-server-333ab7b90297.herokuapp.com/api/inventories",
        "GitHub": "Private",
        "description": "A Node and Express app connected to a MySQL database. Has endpoints to GET /inventories, POST /inventories, GET /inventories/:id, PUT /inventories/:id, DELETE /inventories/:id, GET /warehouses, POST /warehouses, GET /warehouses/:id, PUT /warehouses/:id, DELETE /warehouses/:id, and GET /warehouses/:id/inventories. Contains routing controllers, logging middleware, and migrations and seeding files necessary for database use.",
        "requirements": "Each team member must take on an equal share of front-end/back-end tasks. Be fully present and available for stand-ups, meetings, and group work. Be available to communicate during working hours. Commit to tasks (tickets) using Jira board and complete tasks, seeking assistance/collaboration as needed. Tickets must be moved through every column to indicate stage of completion. All functionality specified in Jira tickets must be implemented without bugs. Implement Gitflow (using Git and GitHub) to manage sending and receiving updated project code. Leave detailed, frequent Git commit messages on all tasks. Resolve merge conflicts in one's own pull requests. Make pull requests of work completed with descriptions of work completed. Review team-members' pull requests. Leave comments on reviewed pull requests. Never merge pull requests without team approval. Back-end must use Node, Express, Knex, MySQL, npm, Postman, and browser development tools. Must follow specifiec folder structure, naming conventions, and best-practices."
    },
    {
        "id": 5,
        "title": "BrainFlix",
        "stack": ["React", "Sass"],
        "also": ["BEM naming convention"],
        "poster": "BrainFlix.png",
        "video": "file name",
        "live": "https://ck-brainflix.netlify.app/",
        "GitHub": "Private",
        "description": "A video streaming React app, created using Vite, that implements useState, useEffect, useParams, and useNavigate hooks. Has video upload functionality. Responsive at and between mobile, tablet, and desktop breakpoints. Completed in three sprints, each one week.",
        "requirements": "Must follow specified folder structure, naming convention. Must make use of provided assets. Must use Sass, variables, mixins. Layout must be styled using flexbox. Must match the mockups provided. Must be responsive at and between mobile, tablet, and desktop breakpoints. Must be composed of multiple React components. Must use react-router-dom for multi-page functionality. Data must be retrieved using Axios. Additional libraries can be installed using npm."
    },
    {
        "id": 4,
        "title": "BrainFlix Back-end API",
        "stack": ["Node.js", "Express.js"],
        "also": [],
        "poster": "BrainFlix API.png",
        "video": "BrainFlix API Preview.mp4",
        "live": "https://ck-brainflix-api-ba876353b997.herokuapp.com/videos",
        "GitHub": "Private",
        "description": "A Node and Express app that provides live data for BrainFlix. Provides data for all videos and detailed data for a single video. Has endpoints to GET /videos, GET /videos/:id, and POST /videos. Data is persisted using file system.",
        "requirements": "Must follow specified folder structure. Must make use of provided assets. Must have endpoints to GET /videos, GET /videos/:id, and POST /videos."
    },
    {
        "id": 3,
        "title": "BandSite",
        "stack": ["HTML", "Sass", "JavaScript"],
        "also": ["BEM naming convention"],
        "poster": "BandSite.png",
        "video": "BandSite Preview.mp4",
        "live": "https://ck-bandsite.netlify.app/",
        "GitHub": "Private",
        "description": "A two-page, dynamic website consisting of a landing page with functionality to add comments, and a schedule page. Responsive at and between mobile, tablet, and desktop breakpoints. Makes use of Sass pseudoclasses. Completed in three sprints, each one week.",
        "requirements": "Must follow specified folder structure with separation of concerns. Must use BEM naming convention for class names. Must implement Sass variables, mixins. Must use flexbox for layouts. Must match mockups for each screen size. Must be responsive at and between mobile, tablet, and desktop breakpoints. Dynamic HTML must be added by DOM methods. Event handlers must be registered using addEventListener. Must create and implement a class for holding API data, including methods for making requests. API requests must be properly structured promises. Must use Axios library for making API HTTP requests."
    },
    {
        "id": 2,
        "title": "BandSite Back-end API",
        "stack": [],
        "also": [],
        "poster": "BandSite API.png",
        "video": "BandSite API Preview.mp4",
        "live": "https://unit-2-project-api-25c1595833b2.herokuapp.com/",
        "GitHub": "N/A",
        "description": "Live data provided for BandSite. Has endpoints to GET /register, GET /comments, GET /showdates, POST /comments, PUT /comments/:id/like, and DELETE /comments/:id",
        "requirements": "N/A"
    },
    { 
        "id": 1,
        "title": "Nitro Coffee",
        "stack": ["HTML", "CSS", "Sass"],
        "also": ["BEM naming convention"],
        "poster": "Nitro Coffee.png",
        "video": "Nitro Coffee Preview.mp4",
        "live": "https://ck-nitrocoffee.netlify.app/",
        "GitHub": "Private",
        "description": "A two-page, static website consisting of a landing page and menu page sized for desktop screens. Completed in two sprints, each one week.",
        "requirements": "Separation of concerns, styling in relative units, layout using flexbox, use of components, use of positioning, and use of CSS animations."
    }
]